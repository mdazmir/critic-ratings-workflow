#!/usr/bin/osascript -l JavaScript

// Helpers
function apiSearch(query) {
  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe
  const escapedQuery = encodeURIComponent(query)
    .replace(/[!'()*]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`)

  task.executableURL = $.NSURL.fileURLWithPath("/usr/bin/curl")
  task.arguments = ["--silent", `https://internal-prod.apigee.fandom.net/v1/xapi/composer/metacritic/pages/search/${escapedQuery}/web?&apiKey=1MOZgmNFxvmljaQR1X9KAij9Mo4xAY3u`]
  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const dataOut = stdout.fileHandleForReading.readDataToEndOfFileAndReturnError(false)
  const stringOut = $.NSString.alloc.initWithDataEncoding(dataOut, $.NSUTF8StringEncoding).js

  return JSON.parse(stringOut)
}

// Main
function run(argv) {
  const searchQuery = argv[0]
  const entries = apiSearch(searchQuery)["components"][0]["data"]["items"]

  if (entries.length === 0) return JSON.stringify({
    items: [{
      title: `No results found for “${searchQuery}”`,
      valid: false
    }]
  })

  const sfItems = entries.map(entry => {
    const title = entry["title"]
    const type = entry["type"] === "movie" ? "Movie" : (entry["type"] === "show" ? "TV Show" : "Game")
    const year = entry["premiereYear"]
    const score = entry["criticScoreSummary"]["score"]
    const url = `https://metacritic.com${entry["criticScoreSummary"]["url"]}`
    const description = entry["description"]
    const must = entry["mustSee"] || entry["mustWatch"] || entry["mustPlay"]
    const scoreType = must ? "positive" : (score > 60 ? "mixed" : "negative")

    if (score === 0 || score === null) return undefined

    return {
      title: title,
      subtitle: `${score} · ${type}, ${year}`,
      arg: url,
      icon: { path: `images/${scoreType}.png` },
      mods: { alt: { subtitle: description } }
    }
  }).filter(item => item)

  return JSON.stringify({ items: sfItems })
}
